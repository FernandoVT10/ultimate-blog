components:
  requestBodies:
    UpdateTitle:
      type: object
      required: [title]
      properties:
        title:
          type: string
          maxLength: 100

    UpdateContent:
      type: object
      required: [content]
      properties:
        content:
          type: string
          maxLength: 500

    UpdateTags:
      type: object
      required: [tags]
      properties:
        tags:
          type: array
          items:
            type: string

  parameters:
    blogPostId:
      in: path
      name: blogPostId
      required: true
      schema:
        type: string

tags: [name: blogpost]
paths:
  /blogposts:
    get:
      tags: [blogpost]
      summary: Returns all blogposts
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Max number of posts to return
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogPost"
    post:
      security:
        - BearerAuth: []
      tags: [blogpost]
      summary: Creates a post
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required: [title, content, tags, cover]
              properties:
                title:
                  type: string
                  maxLength: 100
                content:
                  type: string
                  maxLength: 5000
                tags:
                  type: array
                  items:
                    type: string
                cover:
                  type: string
                  format: binary
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ValidationErrorResponse"
        401:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotAuthorizedError"


  /blogposts/{blogPostId}:
    get:
      tags: [blogpost]
      summary: Returns the specified blog post
      parameters:
        - $ref: "#/components/parameters/blogPostId"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
        400:
          description: Invalid Id
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ValidationErrorResponse"
        404:
          description: BlogPost not found

  /blogposts/{blogPostId}/updateTitle:
    put:
      security:
        - BearerAuth: []
      tags: [blogpost]
      summary: Updates BlogPost's title
      parameters:
        - $ref: "#/components/parameters/blogPostId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/UpdateTitle"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/requestBodies/UpdateTitle"
      responses:
        204:
          description: Title updated successfully
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ValidationErrorResponse"
        401:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotAuthorizedError"
        404:
          description: BlogPost not found
  
  /blogposts/{blogPostId}/updateContent:
    put:
      security:
        - BearerAuth: []
      tags: [blogpost]
      summary: Updates BlogPost's content
      parameters:
        - $ref: "#/components/parameters/blogPostId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/UpdateContent"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/requestBodies/UpdateContent"
      responses:
        204:
          description: Content updated successfully
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ValidationErrorResponse"
        401:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotAuthorizedError"
        404:
          description: BlogPost not found

  /blogposts/{blogPostId}/updateCover:
    put:
      security:
        - BearerAuth: []
      tags: [blogpost]
      summary: Updates BlogPost's cover
      parameters:
        - $ref: "#/components/parameters/blogPostId"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required: [cover]
              properties:
                cover:
                  type: string
                  format: binary
      responses:
        204:
          description: Cover updated successfully
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ValidationErrorResponse"
        401:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotAuthorizedError"
        404:
          description: BlogPost not found

  /blogposts/{blogPostId}/updateTags:
    put:
      security:
        - BearerAuth: []
      tags: [blogpost]
      summary: Updates BlogPost's tags
      parameters:
        - $ref: "#/components/parameters/blogPostId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/UpdateTags"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/requestBodies/UpdateTags"
      responses:
        204:
          description: Tags updated successfully
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ValidationErrorResponse"
        401:
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotAuthorizedError"
        404:
          description: BlogPost not found
